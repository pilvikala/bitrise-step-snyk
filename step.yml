#
# A couple of useful guides & docs:
#
# - Main Bitrise CLI docs: https://github.com/bitrise-io/bitrise/tree/master/_docs
# - Step Development Guideline: https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
# - Bitrise.yml format spec: https://github.com/bitrise-io/bitrise/blob/master/_docs/bitrise-yml-format-spec.md
# - Bitrise docs: http://devcenter.bitrise.io/
# - Bitrise CLI guides: http://devcenter.bitrise.io/bitrise-cli/

title: |-
  Snyk
summary: |
  Bitrise Snyk Step incorporates Snyk into your Bitrise workflows
description: |
  Bitrise Snyk Step incorporates Snyk into your Bitrise workflows.
  By utilizing this step, you will be able to test your project dependencies for vulnerabilities during builds and use Snyk to monitor your projects
  for new vulnerabilities.
  This step uses Snyk as an external service and requires your authentication token.
website: https://github.com/pilvikala/bitrise-step-snyk
source_code_url: https://github.com/pilvikala/bitrise-step-snyk
support_url: https://github.com/pilvikala/bitrise-step-snyk/issues

# If this step should be available only for certain project types
# just uncomment this `project_type_tags` section and include all the
# project types supported by the step. If the step can be used for all
# project types then you can just remove this section.
# If no `project_type_tags` specified (or specified as an empty array)
# that means the step can be used for any project type.
# You can find more information about project type tags in the Step Development Guideline:
# https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
#
project_type_tags:
#   - ios
#   - macos
  - android
#   - xamarin
  - react-native
#   - cordova
#   - ionic
#   - flutter

# Type tags are used for categorizing steps, for easier step discovery in Step Libraries.
# You can find more information about type tags in the Step Development Guideline:
# https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
type_tags:
  - utility

# These properties define whether a Step is run in a given Workflow or not.
# You can find more information about this in the documentation here:
# https://devcenter.bitrise.io/en/steps-and-workflows/developing-your-own-bitrise-step/developing-a-new-step.html#setting-conditions-for-running-the-step
#
# is_always_run: false
# is_skippable: false
# run_if: ""

# Use the `deps` property to declare dependencies that you can fetch from an OS dependency manager.
# You can find more information about this in the documentation here:
# https://devcenter.bitrise.io/en/steps-and-workflows/developing-your-own-bitrise-step/developing-a-new-step.html#submodules-and-step-dependencies
#
# deps:
#   brew:
#   - name: cmake
#   apt_get:
#   - name: cmake


toolkit:
  bash:
    entry_file: step.sh


inputs:
  - auth_token: $SNYK_AUTH_TOKEN
    opts:
      title: "Auth Token"
      summary: "Snyk Auth Token"
      description: |
        Your Snyk authentication token (see https://app.snyk.io/account).
      is_required: true
      is_sensitive: true
      is_expand: true
  - command: test
    opts:
      title: "Command"
      summary: "Snyk CLI command to run"
      description: |
        This is the CLI command to run with Snyk.
        
        Default value: `test`
      is_required: false
  - severity_threshold: low
    opts:
      title: "Severity threshold"
      summary: "Only report vulnerabilities of the provided level or higher."
      description: |
         Only report vulnerabilities of the provided level or higher (low/medium/high/critical).
         
         Default is low.
      value_options:
        - "low"
        - "medium"
        - "high"
        - "critical"
  - fail_on_issues: "true"
    opts:
      title: "Fail on issues"
      summary: "Specifies whether to fail the build or not based on the results found by Snyk"
      description: |
        Snyk by default returns an error code from the test command. This may break your Bitrise workflow. By specifying `false`, the build can continue even if vulnerabilities are found.
      value_options:
        - "true"
        - "false"
  - monitor: "false"
    opts:
      title: "Monitor (import to Snyk)"
      summary: "If enabled, imports the snapshot of dependencies to Snyk for continuous monitoring after a successful test."
      description: |
        Set this value to `true` to import the snapshot of dependencies to Snyk after a successful test. Snyk will then start monitoring the dependencies for new vulnerabilities and alert when a new vulnerability is discovered.
      value_options:
        - "false"
        - "true"

outputs:
  - EXAMPLE_STEP_OUTPUT:
    opts:
      title: "Example Step Output"
      summary: Summary. No more than 2-3 sentences.
      description: |
        Description of this output.

        Can be Markdown formatted text.
